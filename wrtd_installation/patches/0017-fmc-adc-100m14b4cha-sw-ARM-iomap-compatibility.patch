From 3733e84c6b504e2f8ea3edec88802278e1772db1 Mon Sep 17 00:00:00 2001
From: Mathis MARION <mathis.marion@grenoble-inp.org>
Date: Thu, 29 Jul 2021 17:02:36 +0200
Subject: [PATCH 17/18] [fmc-adc-100m14b4cha-sw] ARM iomap compatibility

Some architectures such as ARM don't use asm-generic/iomap.h and instead
define their own implementation for ioread32 and iowrite32.
This can be checked using the CONFIG_GENERIC_IOMAP preprocessor.

The signature used inside asm-generic/io.h uses volatile for the address
parameter. Thus it is necessary to accomodate this change.

Moreover, ARM uses macros to define ioread32be and iowrite32be, so it is
necessary to define a function on top of the macro to allow for
assignation.
Note: other architectures may not use macros, or use macros for ioread32
and iowrite32, in which case this patch may not work and has to be
adapted.
---
 patches/fmc-adc-100m14b4cha-sw.diff | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

diff --git a/patches/fmc-adc-100m14b4cha-sw.diff b/patches/fmc-adc-100m14b4cha-sw.diff
index d9f8e9d..f0254b4 100644
--- a/patches/fmc-adc-100m14b4cha-sw.diff
+++ b/patches/fmc-adc-100m14b4cha-sw.diff
@@ -81,7 +81,7 @@ index 7478641..3e99eb6 100644
  	fa->dbg_reg_spi = debugfs_create_file("spi-regs", 0444,
  					      fa->dbg_dir, fa,
 diff --git a/kernel/fmc-adc-100m14b4cha.h b/kernel/fmc-adc-100m14b4cha.h
-index 089e5e1..0be6584 100644
+index 089e5e1..8a4e1b2 100644
 --- a/kernel/fmc-adc-100m14b4cha.h
 +++ b/kernel/fmc-adc-100m14b4cha.h
 @@ -159,6 +159,7 @@ struct fa_calib {
@@ -92,19 +92,38 @@ index 089e5e1..0be6584 100644
  #include "linux/fmc.h"
  
  #include <linux/zio.h>
-@@ -190,7 +191,11 @@ enum fa_bus_resource {
+@@ -189,9 +190,30 @@ enum fa_bus_resource {
+ 	ADC_CARR_VME_ADDR,
  };
  
++#ifndef CONFIG_GENERIC_IOMAP
++static inline u32 (ioread32be)(const volatile void __iomem *addr)
++{
++	return ioread32be(addr);
++}
++
++static inline void (iowrite32be)(u32 value, volatile void __iomem *addr)
++{
++	iowrite32be(value, addr);
++}
++#endif
++
  struct fa_memory_ops {
++#ifdef CONFIG_GENERIC_IOMAP
 +#if KERNEL_VERSION(5, 8, 0) <= LINUX_VERSION_CODE
 +	u32 (*read)(const void *addr);
 +#else
  	u32 (*read)(void *addr);
 +#endif
  	void (*write)(u32 value, void *addr);
++#else
++	u32 (*read)(const volatile void *addr);
++	void (*write)(u32 value, volatile void *addr);
++#endif
  };
  
-@@ -451,7 +456,6 @@ struct fa_dev {
+ /*
+@@ -451,7 +473,6 @@ struct fa_dev {
  
  	struct dentry *dbg_dir;
  	struct debugfs_regset32 dbg_reg32;
-- 
2.27.0

